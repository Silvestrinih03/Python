# -*- coding: utf-8 -*-
"""Revisao_Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19KA0LFjmjMIc_ZsNTN32pdjvXBSoabKn

# **Atividade: Revisão Python**
### Marcela Franco - 23013238
### Nicole Silvestrini - 23009486

#### 1) Faça um Programa que leia 20 números inteiros e armazene-os numa lista. Crie duas outras listas, chamadas PARES e IMPARES. Armazene os números pares no vetor PARES e os números IMPARES no vetor impar.  Ao final, imprima os três vetores e seus respectivos tamanhos.
"""

import pandas as pd
import numpy as np

# Biblioteca para entrada de dados
import sys

listInt = []
pares = []
impares = []

print("Digite 20 números inteiros: ")
for i in range(20):
  while True:
    try:
      num = int(input(f"Digite o {i+1}º número: "))

      listInt.append(num)

      if(num%2 == 0):
        pares.append(num)
      else:
        impares.append(num)
      break
    except ValueError:
      print("Valor inválido! Digite um número inteiro.")

print("\n")
print("Lista de Inteiros: ", listInt)
print("Tamanho: ", len(listInt), "\n")
print("Lista de Pares: ", pares)
print("Tamanho: ", len(pares), "\n")
print("Lista de Impares: ", impares)
print("Tamanho: ", len(impares), "\n")

"""#### 2) Leia uma lista com 10 valores inteiros e escreva um programa que remova todos os números negativos."""

listInt2 = []

print("Digite 10 números inteiros: ")
for i in range(10):
  while True:
    try:
      num = int(input(f"Digite o {i+1}º número: "))

      listInt2.append(num)
      break
    except ValueError:
      print("Valor inválido! Digite um número inteiro.")

print("\nLista com números negativos:", listInt2)

listInt2 = [num for num in listInt2 if num >= 0]

print("\n Lista após remover números negativos: ", listInt2)

"""#### 3) Dadas duas listas P1 e P2, ambas com n valores reais que representam as notas de uma turma na prova 1 e na prova 2, respectivamente, escreva um programa que calcule a média da turma nas provas 1 e 2, imprimindo em qual das provas a turma obteve a melhor média."""

def inserir_notas(listaNotas, qtd):
  for i in range(qtd):
    while True:
      try:
        nota = float(input(f"Digite a nota do {i+1}º aluno: "))

        listaNotas.append(nota)
        break
      except ValueError:
        print("Valor inválido!")

def media(listaNotas):
  return sum(listaNotas) / len(listaNotas)

# Main
p1 = []
p2 = []

qntAlunos = int(input("Digite a quantidade de alunos: "))

print("\nInsira as notas obtidas na P1: ")
inserir_notas(p1, qntAlunos)
print("\nInsira as notas obtidas na P2: ")
inserir_notas(p2, qntAlunos)

media_p1 = media(p1)
media_p2 = media(p2)

print(f"\nMédia da turma na prova 1: {media_p1:.2f}")
print(f"\nMédia da turma na prova 2: {media_p2:.2f}")

if media_p1 > media_p2:
    print("\nA turma obteve a melhor média na prova 1.")
elif media_p2 > media_p1:
    print("\nA turma obteve a melhor média na prova 2.")
else:
    print("\nA turma obteve a mesma média nas duas provas.")

"""#### 4) Dadas duas listas L1 e L2, com n valores inteiros, respectivamente, escreva um programa que concatene as listas L1 e L2 em uma nova lista L3. Em seguida, imprima a lista L3 ordenada de maneira crescente e decrescente."""

def inserir_inteiros(listaValores, qtd):
  for i in range(qtd):
    while True:
      try:
        num = int(input(f"Digite o {i+1}º número inteiro: "))

        listaValores.append(num)
        break
      except ValueError:
        print("Valor inválido!")

l1 = []
l2 = []

tamanhoL1 = int(input("\nInforme a quantidade de valores que serão inseridos em L1: "))
print("Inserir valores em L1: ")
inserir_inteiros(l1, tamanhoL1)

tamanhoL2 = int(input("\nInforme a quantidade de valores que serão inseridos em L2: "))
print("Inserir valores em L2: ")
inserir_inteiros(l2, tamanhoL2)

l3 = l1 + l2
print("\nL3: ", l3)
print("\nL3 (ORDEM CRESCENTE): ", sorted(l3))
print("\nL3 (ORDEM DECRESCENTE): ", sorted(l3, reverse = True))

"""#### 5) Crie um programa que receba 10 números do usuário e os insira em uma lista de forma ordenada. No final, mostre a lista resultante."""

def inserir_ordenado(lista):
  for i in range(10):
    while True:
      try:
        num = float(input(f"Digite o {i+1}º número: "))

        j = 0
        while j < len(lista) and num > lista[j]:
          j+=1

        lista.insert(j, num)
        break
      except ValueError:
        print("Valor inválido!")

lista = []
inserir_ordenado(lista)
print("Lista ordenada: ", lista)

"""#### 6) Suponha que você está desenvolvendo uma aplicação de recomendação de filmes e deseja comparar os interesses de dois usuários para sugerir filmes que ambos possam gostar. Crie um programa em Python que realiza o seguinte:
*   Crie dois conjuntos de filmes que representem os interesses de cada usuário.
*   Cada conjunto deve conter pelo menos 5 títulos de filmes.
*   Calcule e exiba a união dos conjuntos, ou seja, a lista de todos os filmes que pelo menos um dos usuários gosta.
*   Calcule e exiba a interseção dos conjuntos, ou seja, a lista de filmes que ambos os usuários gostam.
*   Calcule e exiba a diferença simétrica dos conjuntos, ou seja, a lista de filmes que um dos usuários gosta, mas o outro não gosta.
"""

usuario1 = {"Matrix", "Vingadores", "Interestelar", "Titanic", "Clube da Luta"}
usuario2 = {"Matrix", "Vingadores", "Inception", "O Poderoso Chefão", "Avatar"}

print("Filmes do Usuário 1:", usuario1)
print("Filmes do Usuário 2:", usuario2)
print("\nUnião dos conjuntos: ", usuario1 | usuario2)
print("Intersecção dos conjuntos: ", usuario1 & usuario2)
print("Diferença simétrica dos conjuntos: ", usuario1 ^ usuario2)

"""#### 7) Crie um programa que cadastre informações de várias pessoas (nome, idade e cpf) e armazene num dicionário, sendo o CPF a chave. Depois remova todas as pessoas menores de 18 anos do dicionário e coloque em outro dicionário."""

def cadastrar_pessoas(dic_pessoas):
  cpf = input("\nCPF: ")
  nome = input("Nome: ")
  idade = int(input("Idade: "))
  dic_pessoas[cpf] = [nome, idade]

def remover_menores(dic_pessoas, dic_pessoas_menores):
  for cpf in list(dic_pessoas.keys()):
    nome, idade = dic_pessoas[cpf]
    if(idade < 18):
      dic_pessoas_menores[cpf] = [nome, idade]
      dic_pessoas.pop(cpf)


dic = {}
dic_menores = {}

qnt = int(input("\nInforme a quantidade de pessoas que irá cadastrar: "))

for i in range(qnt):
  cadastrar_pessoas(dic)

print("\nDic criado: ", dic)

remover_menores(dic, dic_menores)
print("\nPessoas maiores de 18 anos:")
print(dic)

print("\nPessoas menores de 18 anos:")
print(dic_menores)

"""#### 8) Região de Origem do CPF. Desenvolva um programa que solicite a digitação de um número de CPF no formato xxx.xxx.xxx-xx e baseado no nono dígito informte a região de origem. A lista abaixo apresenta a relação dígito-estado.
0.   RS  
1.   DF, GO, MT, MS, TO
2.   AC, AP, AM, PA, RO, RR
3.   CE, MA, PI
4.   AL, PB, PE, RN
5.   BA, SE
6.   MG
7.   ES, RJ
8.   SP
9.   PR, SC


"""

import re

regioes_cpf = {
    '0' : "RS",
    '1' : "DF, GO, MT, MS e TO",
    '2' : "AC, AP, AM, PA, RO e RR",
    '3' : "CE, MA e PI",
    '4' : "AL, PB, PE, RN",
    '5' : "BA e SE",
    '6' : "MG",
    '7' : "ES e RJ",
    '8' : "SP",
    '9' : "PR e SC"
}

def receber_cpf():
    while True:
        cpf = input("\nDigite seu CPF no formato XXX.XXX.XXX-XX: ")

        if re.fullmatch(r"\d{3}\.\d{3}\.\d{3}-\d{2}", cpf):
            return cpf
        else:
            print("\nCPF inválido! Favor inserir no formato solicitado (XXX.XXX.XXX-XX).")

def obter_regiao(cpf):
  cpf_numerico = re.sub(r"\D", "", cpf)
  return regioes_cpf.get(cpf_numerico[8])

cpf = receber_cpf()
print(f"\nCPF informado é da região: {obter_regiao(cpf)}")

"""#### 9) Separar de email. Faça um progrma que leia um endereço de email. Verifique se o email é válido, ou seja, se ele contém o símbolo "@". Caso seja inválido, solicitar que o usuário digite um novo email. Caso seja válido, o programa deve identificar o domínio. Exemplo: se o usuário digitar "teste@gmail.com", o seu algoritmo deverá retornar "gmail"."""

import re
def receber_email():
    while True:
        email = input("\nDigite seu e-mail: ").strip()

        if re.match(r"^[^@]+@[^@]+\.[a-z]+$", email, re.IGNORECASE):
            return email
        else:
            print("\nE-mail inválido! O e-mail deve conter @.")

def identificar_dominio(email):
  dominio = email.split("@")[1]
  dominio_limpo = dominio.split(".")[0]

  return dominio_limpo

email = receber_email()
print("Domínio: ", identificar_dominio(email))

"""#### 10) Tamanho de strings. Faça um programa que leia 2 strings e informe o conteúdo delas seguido do seu comprimento. Informe também se as duas strings possuem o mesmo comprimento e são iguais ou diferentes no conteúdo.


```
Compara duas strings
String 1: Brasil Hexa 2026
String 2: Brasil! Hexa 2026!
Tamanho de "Brasil Hexa 2026": 16 caracteres
Tamanho de "Brasil! Hexa 2026!": 18 caracteres
As duas strings são de tamanhos diferentes.
As duas strings possuem conteúdo diferente.
```


"""

while True:
  string1 = input("Insira a primeira string: ")
  string2 = input("Insira a segunda string: ")

  tamanhoString1 = len(string1)
  tamanhoString2 = len(string2)

  print("\nComparando Strings")
  print("String 1: ", string1)
  print("String 2: ", string2)
  print("Tamanho string 1: ", tamanhoString1, "caracteres")
  print("Tamanho string 2: ", tamanhoString2, "caracteres")
  if tamanhoString1 != tamanhoString2:
    print("As duas strings são de tamanhos diferentes")
    print("As duas strings possuem conteúdo diferente")
  else:
    print("As duas strings são do mesmo tamanho")
    if string1 == string2:
      print("As duas strings possuem o mesmo conteúdo")
    else:
      print("As duas strings possuem conteúdo diferente")

  opcao = input("\nDigite 0 para continuar ou qualquer outra tecla para sair: ")
  if opcao != "0":
    print("Programa finalizado!")
    break